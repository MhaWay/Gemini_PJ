#include <UI\UI.h>
namespace UI
{

    GyverOLED<SSH1106_128x64> oled;

    const unsigned char octopus[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 
	0xe0, 0xe0, 0xc0, 0xc0, 0x40, 0x60, 0x60, 0x38, 0x3c, 0x3e, 0x1e, 0x1e, 0x9c, 0x98, 0x98, 0x98, 
	0x98, 0x98, 0x98, 0x1c, 0x1e, 0x1e, 0x3e, 0x3c, 0x38, 0x60, 0x60, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 
	0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0x30, 0x18, 0x8f, 0xc7, 0xe7, 
	0xe3, 0xf1, 0x19, 0x08, 0x0c, 0x0e, 0x1e, 0x1e, 0x0f, 0x03, 0x01, 0x01, 0x01, 0x03, 0x07, 0x07, 
	0x07, 0x03, 0x01, 0x01, 0x01, 0x03, 0x07, 0x0e, 0x0e, 0x0e, 0x0c, 0x0c, 0x08, 0x11, 0xf1, 0xe3, 
	0xc7, 0x8f, 0x1f, 0x38, 0x70, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x80, 0xe1, 0x7f, 0x1f, 0x07, 0xc1, 0xf0, 0xfc, 0xc6, 0x03, 0x03, 0x03, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x60, 0x30, 0x20, 0x00, 0x00, 
	0x00, 0x80, 0xc0, 0x60, 0x70, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 
	0x01, 0x01, 0x03, 0xec, 0xf0, 0x40, 0x03, 0x0f, 0x3f, 0xff, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x1f, 0xff, 0xff, 0x07, 0x00, 0xe0, 0xff, 0xc7, 0xc1, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xc0, 0xe0, 0xf0, 0x78, 0x1c, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0e, 
	0x1f, 0x31, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1c, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x66, 0x00, 0x00, 0x01, 0xff, 0xff, 0x3f, 0x0f, 0x06, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x70, 0xf8, 0xff, 0xff, 0xe0, 0x00, 0x01, 0x3f, 0xe3, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x03, 0x07, 0x0f, 0x1e, 0x30, 0x60, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x01, 0x06, 0x8c, 0xf8, 
	0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x38, 0x1e, 0x0f, 0x07, 0x03, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x20, 0x00, 0x00, 0x80, 0xff, 0xff, 0x7c, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 0xff, 0xf8, 0xe0, 0xc1, 0x07, 0x1f, 0x31, 0x40, 0xc0, 0xc0, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x07, 0x03, 0x01, 0x00, 
	0x00, 0x00, 0x06, 0x06, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 
	0x40, 0x40, 0x20, 0x11, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x03, 0x03, 0x07, 0x0e, 0x1c, 0xf8, 0xf0, 0xe0, 
	0xe0, 0xc0, 0x80, 0x88, 0x10, 0x10, 0x18, 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x20, 
	0x20, 0x00, 0x00, 0x00, 0x40, 0x40, 0x20, 0x08, 0x08, 0x00, 0x00, 0x00, 0x88, 0x84, 0xc2, 0xc0, 
	0xe0, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 
	0x03, 0x03, 0x01, 0x03, 0x03, 0x03, 0x06, 0x06, 0x3e, 0x3c, 0x3c, 0x1c, 0x1c, 0x0c, 0x0c, 0x08, 
	0x08, 0x0c, 0x0c, 0x0c, 0x3c, 0x3c, 0x1c, 0x06, 0x06, 0x02, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    void Setup()
    {
        oled.init();
        oled.clear();
        oled.update();
    }

    void setBatStatus(float level)
    {
        oled.roundRect(0, 51, 127, 63, OLED_CLEAR);
        oled.setCursorXY(4, 50);
        oled.print("Bat");
        oled.setCursorXY(23, 50);
        oled.print(uint8_t (level * 100));
        oled.setCursorXY(43, 50);
        oled.print("%");
        oled.rect(52, 50, 122, 57, OLED_STROKE);
        oled.rect(52, 50, (level * 72) + 50, 57, OLED_FILL || OLED_STROKE);
        DrawFrame();
    }

    void DrawSplash()
    {

        oled.clear();
        oled.update();

        for (uint8 Y = 1; Y < 32; Y += 4)
        {
            oled.roundRect((Y * 2), Y, 128 - (Y * 2), 64 - Y, OLED_STROKE);
            oled.update();
        }

        oled.clear();
        oled.drawBitmap(0, 0, octopus, 128, 64, BITMAP_NORMAL, BUF_ADD);
        oled.update();
    }

    void MainUIFrame()
    {
        oled.clear();
        oled.update();

        for (uint8_t X = 0; X < 8; X++)
        {
            oled.rect(7 + (X * 15), 4, 17 + (X * 15), 8, OLED_STROKE);   // bank 1
            oled.rect(7 + (X * 15), 11, 17 + (X * 15), 15, OLED_STROKE); // bank 2
        }

        oled.setCursorXY(12, 25);
        oled.setScale(2);
        oled.print("Gemini");

        oled.setCursorXY(85, 33);
        oled.setScale(1);
        oled.print("(GG)");

        DrawFrame();
    }

    void SetIMUStatus(uint8 imuID, bool Status)
    {
        uint8_t UIOffset = imuID % 8;

        if (imuID < 8)
        {
            oled.rect(7 + (UIOffset * 15), 4, 17 + (UIOffset * 15), 8, (Status) ? OLED_FILL : OLED_STROKE); // bank 1
        }
        else
        {
            oled.rect(7 + (UIOffset * 15), 11, 17 + (UIOffset * 15), 15, (Status) ? OLED_FILL : OLED_STROKE); // bank 2
        }
        oled.update();
    }

    void DrawFrame(void)
    {
        oled.roundRect(0, 0, 127, 63, OLED_STROKE);
        oled.line(1, 45, 126, 45, OLED_STROKE);
        oled.line(1, 20, 126, 20, OLED_STROKE);
        oled.update(); // обновить. Только для режима с буфером! OLED_BUFFER
    }

    void SetImuCount(uint8 IMUs)
    {

        oled.setScale(1);
        oled.roundRect(0, 51, 127, 63, OLED_CLEAR);
        oled.printf("%u  Sensors Active", IMUs);
        oled.setCursorXY(15, 51);
        DrawFrame();
        oled.update();
    }

    void SetMessage(uint8 MessageID)
    {

        oled.setScale(1);
        oled.roundRect(0, 51, 127, 63, OLED_CLEAR);

        switch (MessageID)
        {
        case 1:
            oled.setCursorXY(17, 51);
            oled.print("Scanning Sensors");
            break;

        case 2:
            oled.setCursorXY(10, 51);
            oled.print("Connecting To WIFI");
            break;

        case 3:
            oled.setCursorXY(15, 51);
            oled.print("WIFI Connect FAILED");
            break;

        case 4:
            oled.setCursorXY(5, 51);
            oled.print("Connecting To Server");
            break;

        case 5:
            oled.setCursorXY(38, 51);
            oled.print("Server lost");
            break;

        case 6:
            //  oled.setCursorXY(30, 51);
            //  oled.print("Sending Data");
            break;
        }

        DrawFrame();
        oled.update();
    }

}